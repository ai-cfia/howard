---
trigger:
  branches:
    include:
      - main

pr: none

pool:
  name: "Azure_CFIA_Agents_for_IAAS"
  demands:
    - Agent.Name -equals Agent1_C004


variables:
  - group: terraform-backend-settings

stages:
  - stage: InitAndPlan
    displayName: "Initialize and Plan"
    jobs:
      - job: TerraformInitPlan
        displayName: "Terraform Init and Plan"
        steps:
          - task: AzureCLI@2
            displayName: "Azure CLI Login"
            inputs:
              azureSubscription: $(serviceConnectionName)
              scriptType: "ps"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "Successfully logged in with Azure CLI"

          - task: AzureCLI@2
            displayName: "Get AKS Credentials"
            inputs:
              azureSubscription: $(serviceConnectionName)
              scriptType: "ps"
              scriptLocation: "inlineScript"
              inlineScript: |
                az aks get-credentials `
                  --name "$(aks-name)" `
                  --resource-group "$(aks-resource-group)" `
                  --admin `
                  --file "~/.kube/config"
                Write-Host "AKS credentials configured for kubectl"

          - task: DownloadSecureFile@1
            name: DownloadSecureVars
            displayName: "Download staging.tfvars"
            inputs:
              secureFile: "staging.tfvars"

          - script: |
              $TerraformPath = "$(System.DefaultWorkingDirectory)\terraform\tools\terraform.exe"
              if (!(Test-Path $TerraformPath)) {
                  Write-Error "Terraform executable not found at $TerraformPath"
                  exit 1
              }
              Write-Host "Terraform executable located at $TerraformPath"
              $env:PATH = "$($env:PATH);$(System.DefaultWorkingDirectory)\terraform\tools"
            displayName: "Add Terraform to PATH"

          - script: |
              terraform init `
                -backend-config="storage_account_name=$(storageAccountName)" `
                -backend-config="container_name=$(containerName)" `
                -backend-config="key=$(stateKey)" `
                -backend-config="resource_group_name=$(resourceGroupName)"
            displayName: "Terraform Init"
            workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/staging"

          - script: |
              terraform apply `
                -var-file="$(DownloadSecureVars.SecureFilePath)" `
                -auto-approve
            displayName: "Terraform Apply"
            workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/staging"

  - stage: Apply
    displayName: "Apply Terraform Plan"
    dependsOn: InitAndPlan
    condition: succeeded()
    jobs:
      - deployment: TerraformApply
        displayName: "Terraform Apply"
        pool:
          vmImage: "ubuntu-latest"
        environment: "TFApproval"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: "Azure CLI Login"
                  inputs:
                    azureSubscription: $(serviceConnectionName)
                    scriptType: "ps"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      echo "Successfully logged in with Azure CLI"

                - task: AzureCLI@2
                  displayName: "Get AKS Credentials"
                  inputs:
                    azureSubscription: $(serviceConnectionName)
                    scriptType: "ps"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az aks get-credentials `
                        --name "$(aks-name)" `
                        --resource-group "$(aks-resource-group)" `
                        --admin `
                        --file "~/.kube/config"
                      Write-Host "AKS credentials configured for kubectl"

                - task: DownloadSecureFile@1
                  name: DownloadSecureVars
                  displayName: "Download staging.tfvars"
                  inputs:
                    secureFile: "staging.tfvars"

                - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                  displayName: "Install Terraform"
                  inputs:
                    terraformVersion: '1.7.2'

                - task: TerraformTaskV2@2
                  displayName: Terra Init
                  inputs:
                    provider: "azurerm"
                    command: "init"
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/staging"
                    backendServiceArm: "$(serviceConnectionName)"
                    backendAzureRmResourceGroupName: "$(resourceGroupName)"
                    backendAzureRmStorageAccountName: "$(storageAccountName)"
                    backendAzureRmContainerName: "$(containerName)"
                    backendAzureRmKey: "$(stateKey)"

                - task: TerraformTaskV2@2
                  displayName: "Terra Apply"
                  inputs:
                    provider: "azurerm"
                    command: "apply"
                    commandOptions: "-var-file=$(DownloadSecureVars.SecureFilePath)"
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/staging"
                    environmentServiceNameAzureRM: "$(serviceConnectionName)"
