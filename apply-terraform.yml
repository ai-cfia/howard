---
trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: terraform-backend-settings

stages:
  - stage: InitAndPlan
    displayName: 'Initialize and Plan'
    jobs:
      - job: TerraformInitPlan
        displayName: 'Terraform Init and Plan'
        steps:
          - task: TerraformTaskV2@2
            displayName: Terra Init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory:
                '$(System.DefaultWorkingDirectory)/terraform/staging'
              backendServiceArm: '$(serviceConnectionName)'
              backendAzureRmResourceGroupName: '$(resourceGroupName)'
              backendAzureRmStorageAccountName: '$(storageAccountName)'
              backendAzureRmContainerName: '$(containerName)'
              backendAzureRmKey: '$(stateKey)'

          - task: TerraformTaskV1@0
            displayName: Terra Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory:
                '$(System.DefaultWorkingDirectory)/terraform/staging'
              environmentServiceNameAzureRM: '$(serviceConnectionName)'

  - stage: Apply
    displayName: 'Apply Terraform Plan'
    dependsOn: InitAndPlan
    condition: succeeded()
    jobs:
      - deployment: TerraformApply
        displayName: 'Terraform Apply'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'ProductionApproval'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: TerraformTaskV1@0
                  displayName: 'Terra Apply'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory:
                      '$(System.DefaultWorkingDirectory)/terraform/staging'
                    environmentServiceNameAzureRM: '$(serviceConnectionName)'
