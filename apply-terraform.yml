---
trigger:
  branches:
    include:
      - main

pr: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: terraform-backend-settings

stages:
  - stage: InitAndPlan
    displayName: "Initialize and Plan"
    jobs:
      - job: TerraformInitPlan
        displayName: "Terraform Init and Plan"
        steps:
          - task: DownloadSecureFile@1
            name: DownloadSecureVars
            displayName: 'Download staging.tfvars'
            inputs:
              secureFile: 'staging.tfvars'  
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(DownloadSecureVars.SecureFilePath)'
              Contents: '**' 
              TargetFolder: '$(System.DefaultWorkingDirectory)/terraform/staging'
          - task: TerraformTaskV2@2
            displayName: Terra Init
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/staging"
              backendServiceArm: "$(serviceConnectionName)"
              backendAzureRmResourceGroupName: "$(resourceGroupName)"
              backendAzureRmStorageAccountName: "$(storageAccountName)"
              backendAzureRmContainerName: "$(containerName)"
              backendAzureRmKey: "$(stateKey)"
          - task: TerraformTaskV2@2
            displayName: Terra Plan
            inputs:
              provider: "azurerm"
              command: "plan"
              commandOptions: '-var-file=$(System.DefaultWorkingDirectory)/terraform/staging/staging.tfvars'
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/staging"
              environmentServiceNameAzureRM: "$(serviceConnectionName)"

  - stage: Apply
    displayName: "Apply Terraform Plan"
    dependsOn: InitAndPlan
    condition: succeeded()
    jobs:
      - deployment: TerraformApply
        displayName: "Terraform Apply"
        pool:
          vmImage: "ubuntu-latest"
        environment: "ProductionApproval"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: DownloadSecureFile@1
                  name: DownloadSecureVars
                  displayName: 'Download staging.tfvars'
                  inputs:
                    secureFile: 'staging.tfvars'  
                - task: CopyFiles@2
                  inputs:
                    SourceFolder: '$(DownloadSecureVars.SecureFilePath)'
                    Contents: '**' 
                    TargetFolder: '$(System.DefaultWorkingDirectory)/terraform/staging'
                - task: TerraformTaskV2@2
                  displayName: Terra Init
                  inputs:
                    provider: "azurerm"
                    command: "init"
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/staging"
                    backendServiceArm: "$(serviceConnectionName)"
                    backendAzureRmResourceGroupName: "$(resourceGroupName)"
                    backendAzureRmStorageAccountName: "$(storageAccountName)"
                    backendAzureRmContainerName: "$(containerName)"
                    backendAzureRmKey: "$(stateKey)"
                - task: TerraformTaskV2@2
                  displayName: "Terra Apply"
                  inputs:
                    provider: "azurerm"
                    command: "apply"
                    commandOptions: '-var-file=$(System.DefaultWorkingDirectory)/terraform/staging/staging.tfvars'
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/staging"
                    environmentServiceNameAzureRM: "$(serviceConnectionName)"
