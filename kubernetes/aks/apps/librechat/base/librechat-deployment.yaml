apiVersion: apps/v1
kind: Deployment
metadata:
  name: librechat
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: librechat
  template:
    metadata:
      labels:
        app: librechat
    spec:
      initContainers:
        - name: take-data-dir-ownership
          image: alpine:3
          command: ["sh", "-c", "chown -R 1000:3000 /app/client/public/images"]
          volumeMounts:
            - name: image-volume
              mountPath: /app/client/public/images
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/role
                    operator: In
                    values:
                      - agent
      containers:
        - name: librechat
          image: ghcr.io/danny-avila/librechat:latest
          ports:
            - containerPort: 3080
          resources:
            requests:
              cpu: "2"
              memory: "4Gi"
            limits:
              cpu: "2"
              memory: "6Gi"
          envFrom:
            - configMapRef:
                name: librechat-configenv
            - secretRef:
                name: librechat-secrets
          volumeMounts:
            - name: config-yaml
              mountPath: "/app/librechat.yaml"
              subPath: "librechat.yaml"
              readOnly: true
            - name: image-volume
              mountPath: "/app/client/public/images"
          securityContext:
            runAsUser: 1000
            runAsGroup: 3000
      volumes:
        - name: config-yaml
          configMap:
            name: librechat-config
        - name: image-volume
          persistentVolumeClaim:
            claimName: librechat-images-pvc
---
kind: Secret
apiVersion: v1
metadata:
  name: librechat-secrets
  annotations:
    avp.kubernetes.io/path: "kv/data/librechat/librechat-client"
    avp.kubernetes.io/secret-version: "8"
stringData:
  SEARCH: "true"
  MEILI_MASTER_KEY: <MEILI_MASTER_KEY>
  JWT_SECRET: <JWT_SECRET>
  JWT_REFRESH_SECRET: <JWT_REFRESH_SECRET>
  # GOOGLE_KEY: <GOOGLE_KEY>
  AZURE_OPENAI_GPT4_API_KEY: <AZURE_OPENAI_GPT4_API_KEY>
